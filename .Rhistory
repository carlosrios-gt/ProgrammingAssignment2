## Proyecto Asignado: 2
## Inicio de la proiedad inversa
i <- NULL
MatMatSet<- function( matrix ) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list(MatSet= set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
list(MatSet= MatSet, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if( !is.null(m) ) {
message("Obteniendo datos en cache")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
MatSet<- function( matrix ) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list(MatSet= MatSet, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if( !is.null(m) ) {
message("Obteniendo datos en cache")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
## Proyecto Asignado: 2
## Inicio de la proiedad inversa
i <- NULL
MatSet<- function( matrix ) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list(MatSet= MatSet, get = get,
setInverse = setInverse,
getInverse = getInverse)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if( !is.null(m) ) {
message("Obteniendo datos en cache")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
## Proyecto Asignado: 2
## Inicio de la propiedad inversa: makeCacheMatrix
makeCacheMatrix <- function( m = matrix() ) {
i <- NULL
MatSet<- function( matrix ) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list(MatSet= MatSet, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if( !is.null(m) ) {
message("Obteniendo datos")
return(m)
}
data <- x$get()
m <- solve(data) %*% data
x$setInverse(m)
m
}
